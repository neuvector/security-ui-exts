import { elapsedTime } from "@shell/utils/time";
export const REGISTRY_SCAN_TABLE =[
    {
        name:          "scan",
        labelKey:      "imageScanner.registries.registrytable.header.scan",
        value:         'metadata.name',
        formatter:     "ScanNameCell",
        sort:          "scan",
    },
    {
        name:          "registry",
        labelKey:      "imageScanner.registries.registrytable.header.registry",
        value:         "registry.id",
        sort:          "id",
    },
    {
        name:          "namespace",
        labelKey:      "imageScanner.registries.registrytable.header.namespace",
        value:         "metadata.namespace",
        sort:          "metadata.namespace",
    },
    {
        name:          "repositories",
        labelKey:      "imageScanner.registries.registrytable.header.repos",
        value:         "registry.spec.repositories",
        sort:          "registry.spec.repositories",
    },
    {
        name:          "schedule",
        labelKey:      "imageScanner.registries.registrytable.header.schedule",
        value:         "schedule",
        getValue:      (row: any) => elapsedTime(row.schedule * 3600 * 1000).label,
        sort:          "schedule",
    },
    {
        name:          "status",
        labelKey:      "imageScanner.registries.registrytable.header.status",
        value:         "registry.status.conditions.0.type",
        formatter:     "RegistryStatusCellBadge",
        sort:          "registry.status.conditions.0.type",
    },
    {
        name:          "_progress",
        labelKey:      "imageScanner.registries.registrytable.header.progress",
        value:         "progress",
        getValue:      (row: any) => row.progress.toString(),
        formatter:     "ProgressCell",
        sort:          "progress",
    },
    {
        name:          "previousScan",
        labelKey:      "imageScanner.registries.registrytable.header.prevScan",
        value:         "status.conditions.1.type",
        formatter:     "PreviousScanCell",
        sort:          "status.conditions.1.type",
    },
];