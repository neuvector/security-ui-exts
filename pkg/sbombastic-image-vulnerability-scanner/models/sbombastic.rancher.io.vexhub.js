import SteveModel from '@shell/plugins/steve/steve-class';

export default class SbombasticRancherIoVexhub extends SteveModel {
	get _availableActions() {
		let out = super._availableActions || [];

		// Check if we are in the details page
		const isDetailsPage = this.$rootState.targetRoute && 'id' in this.$rootState.targetRoute.params;

		// Remove download actions and View in API, keep edit YAML and clone
		const remove = new Set([
			'download',
			'downloadYaml',
			'downloadyaml',
			'viewYaml',
			'goToViewYaml',
			'viewInApi',
			'showConfiguration',
		]);
		out = out.filter((a) => !a?.action || !remove.has(a.action));

		const isEnabled = !!this.spec?.enabled;
		const toggle = this.toggle;

		if (isEnabled) {
			// For enabled items: Disable, then other actions
			const reordered = [toggle]; // Only the disable action
			
			// Add other actions except delete (which goes last)
			const otherActions = out.filter(a => a && a.action !== 'promptRemove');
			reordered.push(...otherActions);
			
			// Add delete at the end
			const deleteAction = out.find((a) => a?.action === 'promptRemove');
			if (deleteAction) {
				reordered.push(deleteAction);
			}

			// Ensure all actions are enabled
			const returnActions = reordered.map(action => {
				if (action && action.enabled === false) {
					return { ...action, enabled: true };
				}
				return action;
			});
			return isDetailsPage ? returnActions.slice(1) : returnActions;
		}

		// When disabled: Enable, then Delete
		const deleteAction = out.find((a) => a?.action === 'promptRemove');
		const returnActions = [toggle, ...(deleteAction ? [deleteAction] : [])];
		return isDetailsPage ? returnActions.slice(1) : returnActions;
	}

	get canDelete() {
		return !this.spec?.enabled;
	}

	get fullDetailPageOverride() {
		return true; 
	}

	get toggle() {
		const isEnabled = !!this.spec?.enabled;
		return isEnabled
			? {
				action:   'disable',
				label:    this.t('imageScanner.vexManagement.buttons.disable') || 'Disable',
				icon:     'icon-pause',
				enabled:  true,
				bulkable: true,
				invoke:   async() => {
					this.spec = { ...(this.spec || {}), enabled: false };
					await this.save();
				}
			}
			: {
				action:   'enable',
				label:    this.t('imageScanner.vexManagement.buttons.enable') || 'Enable',
				icon:     'icon-play',
				enabled:  true,
				bulkable: true,
				invoke:   async() => {
					this.spec = { ...(this.spec || {}), enabled: true };
					await this.save();
				}
			};
	}
} 