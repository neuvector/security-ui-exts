import SteveModel from '@shell/plugins/steve/steve-class';
import { PRODUCT_NAME, PAGE } from "@sbombastic-image-vulnerability-scanner/types";
import { RESOURCE } from '@sbombastic-image-vulnerability-scanner/types';
import { _CREATE } from '@shell/config/query-params';
export default class Registry extends SteveModel {
  get _availableActions() {
    console.log("Registry _availableActions");
    const out = super._availableActions.filter(action => !['showConfiguration','download','downloadYaml', 'showConfiguration'].includes(action.action));

    // In details page, we don't want to show the scan action
    if (this.$rootState.targetRoute && 'id' in this.$rootState.targetRoute.params) {
      return out;
    }

    const scanAction = {
          action:   'scanRegistry',
          label:    this.t('imageScanner.registries.button.startScan'),
          icon:     'icon-play',
          enabled:  true,
          bulkable: false,
          invoke:   async ({}, res = []) => {
            const target = (res && res.length ? res[0] : r);
            const model = target._model || target;
            console.log("scanRegistry model", model);
            const scanjobObj = await this.$dispatch('create', {
                type: RESOURCE.SCAN_JOB,
                metadata: {
                    generateName: model.metadata.name,
                    namespace: model.metadata.namespace,
                },
                spec: {
                    registry: model.metadata.name,
                }
            });
            try {
                await scanjobObj.save();
                this.$dispatch('growl/success', {
                    title: this.$rootGetters['i18n/t']('imageScanner.registries.messages.registryScanComplete'),
                    message: this.$rootGetters['i18n/t']('imageScanner.registries.messages.registryScanComplete', { name: model.metadata.name }),
                }, { root: true });
            } catch (e) {
                this.$dispatch('growl/error', {
                    title: this.$rootGetters['i18n/t']('imageScanner.registries.messages.registryScanFailed'),
                    message: e.message,
                }, { root: true });
            } finally {
                setTimeout(() => {
                    target.refreshFn();
                }, 2000);
            }
          },
        };
        const divider = {
          divider:true
        };

    out.unshift(divider);
    out.unshift(scanAction);

    return out;
  }

  set _availableActions(actions) {
    this._availableActions = actions;
  }
  get listLocation() {
    return { name: `c-cluster-${PRODUCT_NAME}-${PAGE.REGISTRIES}`, };
  }

  get doneOverride() {
    return this.listLocation;
  }

  get parentLocationOverride() {
    return this.listLocation;
  }
}