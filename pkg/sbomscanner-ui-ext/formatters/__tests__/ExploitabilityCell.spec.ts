import { jest } from '@jest/globals';
import { shallowMount } from '@vue/test-utils';
import ExploitabilityCell from '../ExploitabilityCell.vue';

describe('ExploitabilityCell.vue', () => {
  const mockT = jest.fn((key) => key);
  const mountComponent = (row) => {
    return shallowMount(ExploitabilityCell, {
      props:  { row },
      global: { mocks: { t: mockT } }
    });
  };

  beforeEach(() => {
    mockT.mockClear();
  });

  it('should render the translated string for a "High" exploitability', () => {
    const mockRow = { exploitability: 'High' };

    const wrapper = mountComponent(mockRow);

    expect(mockT).toHaveBeenCalledTimes(1);

    expect(mockT).toHaveBeenCalledWith('imageScanner.imageDetails.high');

    const span = wrapper.find('.exploitability-cell');

    expect(span.exists()).toBe(true);
    expect(span.text()).toBe('imageScanner.imageDetails.high');
  });

  it('should handle mixed-case values by converting to lowercase', () => {
    const mockRow = { exploitability: 'Not_Applicable' };

    const wrapper = mountComponent(mockRow);

    expect(mockT).toHaveBeenCalledTimes(1);
    expect(mockT).toHaveBeenCalledWith('imageScanner.imageDetails.not_applicable');

    expect(wrapper.text()).toBe('imageScanner.imageDetails.not_applicable');
  });

  it('should handle already lowercase values', () => {
    const mockRow = { exploitability: 'low' };

    const wrapper = mountComponent(mockRow);

    expect(mockT).toHaveBeenCalledWith('imageScanner.imageDetails.low');
    expect(wrapper.text()).toBe('imageScanner.imageDetails.low');
  });
});
